#ifndef ARRAY_H
#define ARRAY_H

#include <iostream>
#include <assert.h>
#include <string>

/*!
    \brief Класс Массив
    \author Герасимов А.А.
    \version 1.0
    \date 03.03.2017
*/


typedef float typearray;

/*!
    Вспомогательный макрос, который сообщает что пошло не так в программе и закрывает её.
*/

#define assert_ok(str)   				\
        dump(str);						\
        assert(!"Object is OK");		\

using namespace std;

class Array{
    public:
/*!
    Конструкторы класса Массив
*/
        explicit Array();
        explicit Array(int n);
        explicit Array(typearray *,int);
        Array(const Array &);

/*!
    Находит размер массива.
    \return Размер массива.
*/
        int size() const;
/*!
    Добавляет новый элемент в конец массива.
    \param Передается новое значение элемента массива.
    \return Результат добавления. В случае успешного добавления возвращает true. В случае неудачного false.
*/
        bool insert(typearray);
/*!
    Удаляет элемент массива.
    \param Передается позиция,в которой хранится элемент.
    \return Удаленный элемент.
*/
        typearray erase(int);
/*!
    Заменяет элемент массива.
    \param Передается позиция(int), а также значение на которое нужно поменять(typearray).
    \return Результат замены. В случае успешного добавления возвращает true. В случае неудачного false.
*/
        bool replaceItem(int,typearray);
/*!
    Проверяет пустой ли массив.
    \return Результат проверки. Если массив пуст,то возвращает true. Если в массиве пристуствуют элементы, то false.
*/
        bool empty() const;
/*!
    Печатает весь массив на экран.
*/
        void print() const;
/*!
    Заменяет все элементы массива на некоторое значение(typearray)
    \param Передается значение на которое нужно изменить все элементы массива.
    \return В случае успешной замены возвращается true. В случае неудачной false.
*/
        bool fill(typearray);
/*!
    Изменяет размер массива. Если переданное число в качестве параметра будет больше текущего значения количества элементов массива, то новые элементы получат значение nan.
    Прежние элементы не изменятся. Если переданное число будет меньше текущего значения массива, то удаляются все элементы, которые имеют большую позицию, чем переданное значение.
    Если переданное число равно текущему размеру массива, то ничего не изменится
    \param Новый размер массива.
    \return В случае успешной замены возвращает true. В случае неудачной false.
*/
        bool setsize(int);
/*!
    Вовзращает ссылку на первый элемент массива. В случае массива с количеством элементов равное 0 возвращает nan.
    \return Ссылка на первый элемент.
*/
        typearray & first() const;
/*!
    Вовзращает ссылку на последний элемент массива. В случае массива с количеством элементов равное 0 возвращает nan.
    \return Ссылка на последний элемент.
*/
        typearray & last() const;
/*!
    Возвращает ссылку на переданную(int) позицию. В случае выхода за пределы массива возвращает ошибку.
    \return Ссылка на элемент массива.
*/
        typearray & at(int) const;
/*!
    Перегружает [].
    \param Позиция необходимого элемента.
    \return Сссылку на элемент.
*/
        typearray & operator[](int data);

/*!
    Перегружает операцию сложения
    \param Массив. который будет добавлен к данному.
    \return Новый массив, который будет состоять из элементов массивов, которые были сложены.
*/
        const Array operator+(const Array &) const;
/*!
    Перегружает операцию сложения
    \param Элемент который будет добавлен к данному.
    \return Новый массив, который будет состоять из элементов прежнего массива и добавленного элемента.
*/
        const Array operator+(typearray);
/*!
    Перегружает операцию присваивания.
    \param Массив, значения которого будут приравнены данному.
    \return Новый масив, который будет идентичен переданному.
*/
        const Array & operator=(const Array &);
/*!
    Перегружает операцию равенства. Массивы равны тогда, когда имеют одинаковые размер,и значения в соответсвующих ячейках равны.
    \param Массив, который будет сравнен с текущим.
    \return В случае равенства возвращает true. В противоположном случае false.
*/
        bool operator==(const Array &) const;
/*!
    Перегружает операцию неравенства. Массивы равны тогда, когда имеют одинаковые размер,и значения в соответсвующих ячейках равны.
    \param Массив, который будет сравнен с текущим.
    \return В случае равенства возвращает false. В противоположном случае true.
*/
        bool operator!=(const Array &) const;
/*!
    Перегружает операцию вывода. Выводит весь массив на экран.
    \param Стандартный поток ввода-вывода(ostream),выводимый массив(const Array).
    \return Выводит массив на экран.
*/
        friend ostream& operator<<(ostream &,const Array &);
/*!
    Деструктор класса.
*/
        virtual ~Array();
    private:
/*!
    Выводит информацию об ошибке.
    \param Строка, которая сообщает что пошло не так.
*/
        void dump(string) const;
/*!
    Указатель на первый элемент массива
*/
        typearray *arr;
/*!
    Количество элементов
*/
        int n;
};

#endif // ARRAY_H
